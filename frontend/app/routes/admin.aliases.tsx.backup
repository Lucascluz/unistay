import { useState, useEffect } from "react";
import { useNavigate } from "react-router";
import { Button } from "~/components/ui/button";
import { Input } from "~/components/ui/input";
import { Label } from "~/components/ui/label";
import { Card } from "~/components/ui/card";
import { Tabs, TabsList, TabsTrigger, TabsContent } from "~/components/ui/tabs";
import { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from "~/components/ui/dialog";
import { 
  adminAliasApi, 
  type CompanyAlias, 
  type AliasSuggestion,
  type CreateAliasRequest 
} from "~/lib/api/aliases";
import { adminApi } from "~/lib/api/admin";
import { 
  Plus, 
  Search, 
  Edit2, 
  Trash2, 
  Link as LinkIcon, 
  AlertCircle,
  CheckCircle,
  XCircle,
  Filter,
  Tag,
  Building2
} from "lucide-react";

export function meta() {
  return [
    { title: "Alias Management - Admin Dashboard" },
    { name: "description", content: "Manage company aliases and naming variations" },
  ];
}

export default function AdminAliases() {
  const navigate = useNavigate();
  
  // State
  const [aliases, setAliases] = useState<CompanyAlias[]>([]);
  const [suggestions, setSuggestions] = useState<AliasSuggestion[]>([]);
  const [companies, setCompanies] = useState<any[]>([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState("");
  const [success, setSuccess] = useState("");
  
  // Filters
  const [searchTerm, setSearchTerm] = useState("");
  const [filterType, setFilterType] = useState<string>("all");
  const [showUnlinked, setShowUnlinked] = useState(false);
  
  // Dialogs
  const [createDialogOpen, setCreateDialogOpen] = useState(false);
  const [editingAlias, setEditingAlias] = useState<CompanyAlias | null>(null);
  const [linkingAlias, setLinkingAlias] = useState<CompanyAlias | null>(null);
  
  // Form state
  const [formData, setFormData] = useState<CreateAliasRequest>({
    alias_name: "",
    alias_type: "common_name",
    priority: 50,
  });

  useEffect(() => {
    loadData();
  }, [searchTerm, filterType, showUnlinked]);

  const loadData = async () => {
    try {
      setLoading(true);
      
      const params: any = {};
      if (searchTerm) params.search = searchTerm;
      if (filterType !== "all") params.alias_type = filterType;
      if (showUnlinked) params.unlinked = true;
      
      const adminKey = localStorage.getItem('adminKey') || process.env.ADMIN_SECRET_KEY || '';
      
      const [aliasData, suggestionData, companyData] = await Promise.all([
        adminAliasApi.listAliases(params),
        adminAliasApi.listSuggestions({ status: 'pending' }),
        adminApi.getAllCompanies(adminKey),
      ]);
      
      setAliases(aliasData.aliases);
      setSuggestions(suggestionData.suggestions);
      setCompanies(companyData);
    } catch (err: any) {
      setError(err.message || "Failed to load data");
      console.error(err);
    } finally {
      setLoading(false);
    }
  };

  const handleCreateAlias = async (e: React.FormEvent) => {
    e.preventDefault();
    try {
      await adminAliasApi.createAlias(formData);
      setSuccess("Alias created successfully!");
      setCreateDialogOpen(false);
      setFormData({ alias_name: "", alias_type: "common_name", priority: 50 });
      loadData();
    } catch (err: any) {
      setError(err.message || "Failed to create alias");
    }
  };

  const handleUpdateAlias = async (id: string, data: any) => {
    try {
      await adminAliasApi.updateAlias(id, data);
      setSuccess("Alias updated successfully!");
      setEditingAlias(null);
      loadData();
    } catch (err: any) {
      setError(err.message || "Failed to update alias");
    }
  };

  const handleLinkAlias = async (aliasId: string, companyId: string) => {
    try {
      const result = await adminAliasApi.linkAlias(aliasId, companyId);
      setSuccess(result.message);
      setLinkingAlias(null);
      loadData();
    } catch (err: any) {
      setError(err.message || "Failed to link alias");
    }
  };

  const handleDeleteAlias = async (id: string, permanent = false) => {
    if (!confirm(`Are you sure you want to ${permanent ? 'permanently delete' : 'deactivate'} this alias?`)) {
      return;
    }
    
    try {
      await adminAliasApi.deleteAlias(id, permanent);
      setSuccess("Alias deleted successfully!");
      loadData();
    } catch (err: any) {
      setError(err.message || "Failed to delete alias");
    }
  };

  const handleReviewSuggestion = async (
    id: string, 
    status: 'approved' | 'rejected',
    createAlias: boolean = false,
    companyId?: string
  ) => {
    try {
      await adminAliasApi.reviewSuggestion(id, {
        status,
        create_alias: createAlias,
        company_id: companyId,
      });
      setSuccess(`Suggestion ${status}!`);
      loadData();
    } catch (err: any) {
      setError(err.message || "Failed to review suggestion");
    }
  };

  const getAliasTypeLabel = (type: string) => {
    const labels: Record<string, string> = {
      common_name: "Common Name",
      abbreviation: "Abbreviation",
      misspelling: "Misspelling",
      translation: "Translation",
      former_name: "Former Name",
      local_name: "Local Name",
    };
    return labels[type] || type;
  };

  const getAliasTypeBadgeColor = (type: string) => {
    const colors: Record<string, string> = {
      common_name: "bg-blue-100 text-blue-800",
      abbreviation: "bg-purple-100 text-purple-800",
      misspelling: "bg-orange-100 text-orange-800",
      translation: "bg-green-100 text-green-800",
      former_name: "bg-gray-100 text-gray-800",
      local_name: "bg-yellow-100 text-yellow-800",
    };
    return colors[type] || "bg-gray-100 text-gray-800";
  };

  if (loading) {
    return (
      <div className="min-h-screen bg-gray-50 flex items-center justify-center">
        <div className="text-center">
          <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-blue-600 mx-auto"></div>
          <p className="mt-4 text-gray-600">Loading aliases...</p>
        </div>
      </div>
    );
  }

  return (
    <div className="min-h-screen bg-gray-50">
      {/* Header */}
      <div className="bg-white border-b">
        <div className="max-w-7xl mx-auto px-4 py-6">
          <div className="flex items-center justify-between">
            <div>
              <h1 className="text-2xl font-bold text-gray-900">Alias Management</h1>
              <p className="text-gray-600 mt-1">Manage company name variations and aliases</p>
            </div>
            <Button onClick={() => navigate("/admin/dashboard")}>
              Back to Dashboard
            </Button>
          </div>
        </div>
      </div>

      {/* Alerts */}
      {error && (
        <div className="max-w-7xl mx-auto px-4 py-4">
          <div className="bg-red-50 border border-red-200 rounded-lg p-4 flex items-start gap-3">
            <AlertCircle className="w-5 h-5 text-red-600 flex-shrink-0 mt-0.5" />
            <div>
              <p className="text-sm font-medium text-red-800">Error</p>
              <p className="text-sm text-red-700 mt-1">{error}</p>
            </div>
            <button onClick={() => setError("")} className="ml-auto text-red-600 hover:text-red-800">
              <XCircle className="w-5 h-5" />
            </button>
          </div>
        </div>
      )}

      {success && (
        <div className="max-w-7xl mx-auto px-4 py-4">
          <div className="bg-green-50 border border-green-200 rounded-lg p-4 flex items-start gap-3">
            <CheckCircle className="w-5 h-5 text-green-600 flex-shrink-0 mt-0.5" />
            <div>
              <p className="text-sm font-medium text-green-800">Success</p>
              <p className="text-sm text-green-700 mt-1">{success}</p>
            </div>
            <button onClick={() => setSuccess("")} className="ml-auto text-green-600 hover:text-green-800">
              <XCircle className="w-5 h-5" />
            </button>
          </div>
        </div>
      )}

      {/* Main Content */}
      <div className="max-w-7xl mx-auto px-4 py-8">
        <Tabs defaultValue="aliases" className="space-y-6">
          <TabsList>
            <TabsTrigger value="aliases">
              <Tag className="w-4 h-4 mr-2" />
              All Aliases ({aliases.length})
            </TabsTrigger>
            <TabsTrigger value="suggestions">
              <AlertCircle className="w-4 h-4 mr-2" />
              Pending Suggestions ({suggestions.length})
            </TabsTrigger>
          </TabsList>

          {/* Aliases Tab */}
          <TabsContent value="aliases" className="space-y-4">
            {/* Toolbar */}
            <Card className="p-4">
              <div className="flex flex-col md:flex-row gap-4">
                <div className="flex-1">
                  <div className="relative">
                    <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 w-4 h-4 text-gray-400" />
                    <Input
                      placeholder="Search aliases..."
                      value={searchTerm}
                      onChange={(e) => setSearchTerm(e.target.value)}
                      className="pl-10"
                    />
                  </div>
                </div>
                
                <div className="flex gap-2">
                  <select
                    value={filterType}
                    onChange={(e) => setFilterType(e.target.value)}
                    className="px-4 py-2 border rounded-md"
                  >
                    <option value="all">All Types</option>
                    <option value="abbreviation">Abbreviations</option>
                    <option value="misspelling">Misspellings</option>
                    <option value="translation">Translations</option>
                    <option value="former_name">Former Names</option>
                    <option value="local_name">Local Names</option>
                  </select>

                  <Button
                    variant={showUnlinked ? "default" : "outline"}
                    onClick={() => setShowUnlinked(!showUnlinked)}
                  >
                    <Filter className="w-4 h-4 mr-2" />
                    {showUnlinked ? "Show All" : "Unlinked Only"}
                  </Button>

                  <Dialog open={createDialogOpen} onOpenChange={setCreateDialogOpen}>
                    <DialogTrigger asChild>
                      <Button>
                        <Plus className="w-4 h-4 mr-2" />
                        Create Alias
                      </Button>
                    </DialogTrigger>
                    <DialogContent>
                      <DialogHeader>
                        <DialogTitle>Create New Alias</DialogTitle>
                      </DialogHeader>
                      <form onSubmit={handleCreateAlias} className="space-y-4">
                        <div className="space-y-2">
                          <Label htmlFor="alias_name">Alias Name *</Label>
                          <Input
                            id="alias_name"
                            value={formData.alias_name}
                            onChange={(e) => setFormData({ ...formData, alias_name: e.target.value })}
                            placeholder="e.g., IPG"
                            required
                          />
                        </div>

                        <div className="space-y-2">
                          <Label htmlFor="company_id">Company (Optional)</Label>
                          <select
                            id="company_id"
                            value={formData.company_id || ""}
                            onChange={(e) => setFormData({ ...formData, company_id: e.target.value || undefined })}
                            className="w-full px-3 py-2 border rounded-md"
                          >
                            <option value="">Unlinked (link later)</option>
                            {companies.map((company) => (
                              <option key={company.id} value={company.id}>
                                {company.name}
                              </option>
                            ))}
                          </select>
                          <p className="text-sm text-gray-500">
                            Leave empty to create an unlinked alias
                          </p>
                        </div>

                        <div className="space-y-2">
                          <Label htmlFor="alias_type">Type</Label>
                          <select
                            id="alias_type"
                            value={formData.alias_type}
                            onChange={(e) => setFormData({ ...formData, alias_type: e.target.value as any })}
                            className="w-full px-3 py-2 border rounded-md"
                          >
                            <option value="common_name">Common Name</option>
                            <option value="abbreviation">Abbreviation</option>
                            <option value="misspelling">Misspelling</option>
                            <option value="translation">Translation</option>
                            <option value="former_name">Former Name</option>
                            <option value="local_name">Local Name</option>
                          </select>
                        </div>

                        <div className="space-y-2">
                          <Label htmlFor="priority">Priority (0-100)</Label>
                          <Input
                            id="priority"
                            type="number"
                            min="0"
                            max="100"
                            value={formData.priority}
                            onChange={(e) => setFormData({ ...formData, priority: parseInt(e.target.value) })}
                          />
                          <p className="text-sm text-gray-500">
                            Higher priority = appears first in search
                          </p>
                        </div>

                        <div className="flex gap-2">
                          <Button type="submit" className="flex-1">Create Alias</Button>
                          <Button type="button" variant="outline" onClick={() => setCreateDialogOpen(false)}>
                            Cancel
                          </Button>
                        </div>
                      </form>
                    </DialogContent>
                  </Dialog>
                </div>
              </div>
            </Card>

            {/* Aliases List */}
            <Card>
              <div className="overflow-x-auto">
                <table className="w-full">
                  <thead className="bg-gray-50 border-b">
                    <tr>
                      <th className="text-left py-3 px-4 font-semibold text-gray-700">Alias Name</th>
                      <th className="text-left py-3 px-4 font-semibold text-gray-700">Type</th>
                      <th className="text-left py-3 px-4 font-semibold text-gray-700">Company</th>
                      <th className="text-left py-3 px-4 font-semibold text-gray-700">Priority</th>
                      <th className="text-left py-3 px-4 font-semibold text-gray-700">Usage</th>
                      <th className="text-left py-3 px-4 font-semibold text-gray-700">Status</th>
                      <th className="text-left py-3 px-4 font-semibold text-gray-700">Actions</th>
                    </tr>
                  </thead>
                  <tbody className="divide-y">
                    {aliases.length === 0 ? (
                      <tr>
                        <td colSpan={7} className="text-center py-12">
                          <Tag className="w-12 h-12 text-gray-400 mx-auto mb-4" />
                          <p className="text-gray-600">No aliases found</p>
                          <p className="text-sm text-gray-500 mt-1">Create your first alias to get started</p>
                        </td>
                      </tr>
                    ) : (
                      aliases.map((alias) => (
                        <tr key={alias.id} className="hover:bg-gray-50">
                          <td className="py-3 px-4">
                            <div className="font-medium text-gray-900">{alias.alias_name}</div>
                            {alias.created_by_name && (
                              <div className="text-xs text-gray-500">by {alias.created_by_name}</div>
                            )}
                          </td>
                          <td className="py-3 px-4">
                            <span className={`inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium ${getAliasTypeBadgeColor(alias.alias_type)}`}>
                              {getAliasTypeLabel(alias.alias_type)}
                            </span>
                          </td>
                          <td className="py-3 px-4">
                            {alias.company_name ? (
                              <div className="flex items-center gap-2">
                                <Building2 className="w-4 h-4 text-gray-400" />
                                <span className="text-sm text-gray-900">{alias.company_name}</span>
                              </div>
                            ) : (
                              <span className="text-sm text-orange-600 font-medium">Unlinked</span>
                            )}
                          </td>
                          <td className="py-3 px-4">
                            <span className="text-sm text-gray-700">{alias.priority}</span>
                          </td>
                          <td className="py-3 px-4">
                            <span className="text-sm text-gray-700">{alias.usage_count}</span>
                          </td>
                          <td className="py-3 px-4">
                            {alias.is_active ? (
                              <span className="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-green-100 text-green-800">
                                Active
                              </span>
                            ) : (
                              <span className="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-gray-100 text-gray-800">
                                Inactive
                              </span>
                            )}
                          </td>
                          <td className="py-3 px-4">
                            <div className="flex gap-2">
                              {!alias.company_id && (
                                <Dialog>
                                  <DialogTrigger asChild>
                                    <Button size="sm" variant="outline">
                                      <LinkIcon className="w-4 h-4" />
                                    </Button>
                                  </DialogTrigger>
                                  <DialogContent>
                                    <DialogHeader>
                                      <DialogTitle>Link Alias to Company</DialogTitle>
                                    </DialogHeader>
                                    <div className="space-y-4">
                                      <p className="text-sm text-gray-600">
                                        Link "{alias.alias_name}" to a company
                                      </p>
                                      <select
                                        onChange={(e) => e.target.value && handleLinkAlias(alias.id, e.target.value)}
                                        className="w-full px-3 py-2 border rounded-md"
                                      >
                                        <option value="">Select a company...</option>
                                        {companies.map((company) => (
                                          <option key={company.id} value={company.id}>
                                            {company.name}
                                          </option>
                                        ))}
                                      </select>
                                    </div>
                                  </DialogContent>
                                </Dialog>
                              )}
                              
                              <Button
                                size="sm"
                                variant="outline"
                                onClick={() => handleUpdateAlias(alias.id, { is_active: !alias.is_active })}
                              >
                                {alias.is_active ? "Deactivate" : "Activate"}
                              </Button>
                              
                              <Button
                                size="sm"
                                variant="outline"
                                onClick={() => handleDeleteAlias(alias.id, false)}
                              >
                                <Trash2 className="w-4 h-4 text-red-600" />
                              </Button>
                            </div>
                          </td>
                        </tr>
                      ))
                    )}
                  </tbody>
                </table>
              </div>
            </Card>
          </TabsContent>

          {/* Suggestions Tab */}
          <TabsContent value="suggestions" className="space-y-4">
            <Card>
              <div className="overflow-x-auto">
                <table className="w-full">
                  <thead className="bg-gray-50 border-b">
                    <tr>
                      <th className="text-left py-3 px-4 font-semibold text-gray-700">Suggested Name</th>
                      <th className="text-left py-3 px-4 font-semibold text-gray-700">Context</th>
                      <th className="text-left py-3 px-4 font-semibold text-gray-700">Submitted By</th>
                      <th className="text-left py-3 px-4 font-semibold text-gray-700">Date</th>
                      <th className="text-left py-3 px-4 font-semibold text-gray-700">Actions</th>
                    </tr>
                  </thead>
                  <tbody className="divide-y">
                    {suggestions.length === 0 ? (
                      <tr>
                        <td colSpan={5} className="text-center py-12">
                          <CheckCircle className="w-12 h-12 text-gray-400 mx-auto mb-4" />
                          <p className="text-gray-600">No pending suggestions</p>
                          <p className="text-sm text-gray-500 mt-1">All suggestions have been reviewed</p>
                        </td>
                      </tr>
                    ) : (
                      suggestions.map((suggestion) => (
                        <tr key={suggestion.id} className="hover:bg-gray-50">
                          <td className="py-3 px-4">
                            <div className="font-medium text-gray-900">{suggestion.suggested_name}</div>
                          </td>
                          <td className="py-3 px-4">
                            <span className="text-sm text-gray-600">{suggestion.context || "—"}</span>
                          </td>
                          <td className="py-3 px-4">
                            <span className="text-sm text-gray-700">{suggestion.suggested_by_name || "Anonymous"}</span>
                          </td>
                          <td className="py-3 px-4">
                            <span className="text-sm text-gray-600">
                              {new Date(suggestion.created_at).toLocaleDateString()}
                            </span>
                          </td>
                          <td className="py-3 px-4">
                            <Dialog>
                              <DialogTrigger asChild>
                                <Button size="sm" variant="outline">Review</Button>
                              </DialogTrigger>
                              <DialogContent>
                                <DialogHeader>
                                  <DialogTitle>Review Suggestion</DialogTitle>
                                </DialogHeader>
                                <div className="space-y-4">
                                  <div>
                                    <Label>Suggested Name</Label>
                                    <p className="text-lg font-medium mt-1">{suggestion.suggested_name}</p>
                                  </div>
                                  
                                  {suggestion.context && (
                                    <div>
                                      <Label>Context</Label>
                                      <p className="text-sm text-gray-600 mt-1">{suggestion.context}</p>
                                    </div>
                                  )}

                                  <div>
                                    <Label>Link to Company (Optional)</Label>
                                    <select
                                      id={`company-${suggestion.id}`}
                                      className="w-full px-3 py-2 border rounded-md mt-1"
                                    >
                                      <option value="">Don't create alias</option>
                                      {companies.map((company) => (
                                        <option key={company.id} value={company.id}>
                                          {company.name}
                                        </option>
                                      ))}
                                    </select>
                                  </div>

                                  <div className="flex gap-2">
                                    <Button
                                      className="flex-1"
                                      onClick={() => {
                                        const select = document.getElementById(`company-${suggestion.id}`) as HTMLSelectElement;
                                        const companyId = select?.value;
                                        handleReviewSuggestion(
                                          suggestion.id, 
                                          'approved', 
                                          !!companyId,
                                          companyId || undefined
                                        );
                                      }}
                                    >
                                      <CheckCircle className="w-4 h-4 mr-2" />
                                      Approve
                                    </Button>
                                    <Button
                                      variant="outline"
                                      className="flex-1"
                                      onClick={() => handleReviewSuggestion(suggestion.id, 'rejected')}
                                    >
                                      <XCircle className="w-4 h-4 mr-2" />
                                      Reject
                                    </Button>
                                  </div>
                                </div>
                              </DialogContent>
                            </Dialog>
                          </td>
                        </tr>
                      ))
                    )}
                  </tbody>
                </table>
              </div>
            </Card>
          </TabsContent>
        </Tabs>
      </div>
    </div>
  );
}
